$version 14.02

// This is the root component of the entire GUI application.
$rect <20,20,220,60>
$output false
class Application : Core::Root
{
  $rect <340,10,540,50>
  inherited property Bounds = <0,0,320,240>;

  // To do:
  // 
  // - Adjust the visible size of your application (the thick blue border). It should \
  // correspond to the size of your target display.
  // 
  // - The simplest way to compose the appearance of the application is to use the \
  // 'Views' and 'Widgets' from the Gallery.
  // 
  // - To react to touch or keyboard events use the templates from the Gallery folder \
  // 'Event Handlers'.
  // 
  // - To perform transitions (animations) use the templates from the Gallery folder \
  // 'Effects'.
  // 
  // - To store values use the 'Variable', 'Array' and 'Property' templates available \
  // in the Gallery folder 'Chora'.
  // 
  // - To implement behavior use the 'Method' and 'Slot Method' templates available \
  // in the Gallery folder 'Chora'.
  note legend Note1
  {
    attr Bounds = <10,260,790,490>;
  }

  $rect <20,20,160,60>
  object Views::Rectangle Rectangle
  {
    preset Bounds = <0,0,320,240>;
  }

  $rect <20,20,160,60>
  object WidgetSet::ToggleButton toggleLightButton
  {
    preset Bounds = <108,43,212,102>;
    preset OnUpdate = null;
    preset OnSwitchOn = LightOnSlot;
    preset OnSwitchOff = LightOffSlot;
    preset LabelOn = "";
    preset LabelOff = "";
    preset Label = "";
    preset Appearance = WidgetSet::Switch_Lime_Large;
  }

  $rect <558,35,758,75>
  slot LightOnSlot
  {
    Application::Device.LedSetMethod("on", "true", "bool");
  }

  // LedSet
  note group Note
  {
    attr Bounds = <550,-10,850,250>;
  }

  $rect <560,80,760,120>
  slot LightOffSlot
  {
    Application::Device.LedSetMethod("on", "false", "bool");
  }

  $rect <20,20,160,60>
  object WidgetSet::HorizontalSlider BrightnessSlider
  {
    preset Bounds = <60,135,260,195>;
    preset OnEnd = BrightnessSlot;
    preset MaxValue = 255;
    preset CurrentValue = 40;
    preset Appearance = WidgetSet::HorizontalSlider_Lime_Large;
  }

  $rect <560,130,760,170>
  slot BrightnessSlot
  {
    var int32 brightnessVal = BrightnessSlider.CurrentValue;
    var string brightnessString = string(brightnessVal);
    Application::Device.LedSetMethod("bri", brightnessString, "int");
  }

  // This slot method is executed when the associated system event handler 'SystemEventHandler' \
  // receives an event.
  $rect <860,30,1060,70>
  slot onEvent
  {
    BrightnessSlider.CurrentValue = 10;

    /*
       HINT 1:

       You can evaluate the 'sender' parameter. It refers to the handler 
       this method has been called from. This is very useful if multiple
       system event handlers are connected to one and the same 'onEvent'
       method:

       if ( sender == Handler1 )
         trace "The event comes from the Handler1";

       if ( sender == Handler2 )
         trace "... or from the Handler2";
    */

    /*
       HINT 2:

       From this 'onEvent' slot method you can evaluate the optional
       'context' data dispatched together with the system event:

       // First get the context data. You need to cast from the generic 'object'
       // to your own specific context class:
       var YourUnit::ContextClass context = (YourUnit::ContextClass)SystemEventHandler.Context;

       // Any context data passed and the cast was successful?
       if ( context != null )
       {
         // Evaluate the context data:
         someTarget1 = context.SomeData1;
         someTarget2 = context.SomeData2;
       }
    */
  }

  $rect <1060,30,1260,70>
  object Core::SystemEventHandler UpdateSliderEventHandler
  {
    preset OnEvent;
    preset Event = Application::Device.UpdateSliderEvent;
  }

  $rect <1060,100,1260,140>
  property int32 brightnessValue;

  $rect <1060,140,1260,180>
  onset brightnessValue
  {
    // The value doesn't change - nothing to do.
    if ( pure brightnessValue == value )
      return;

    // Remember the property's new value.
    pure brightnessValue = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <1060,180,1260,220>
  onget brightnessValue
  {
    return pure brightnessValue;
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Bounds
  $member Note1
  $member Rectangle
  $member Note
  $member toggleLightButton
  $member LightOnSlot
  $member LightOffSlot
  $member BrightnessSlider
  $member BrightnessSlot
  $member onEvent
  $member UpdateSliderEventHandler
  $member brightnessValue
  $member OnSetbrightnessValue
  $member OnGetbrightnessValue
}

$rect <230,20,430,60>
$output false
resource Resources::Font Font
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 16;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <20,100,220,140>
inline Inline
{
  /*

    TO DO:

    Include external header files or add type and function declarations needed
    in the implementation of Application::DeviceClass. For example:

      #include "DeviceDriver.h"

      #include "your_middleware_api.h"

      void Your_Middleware_Some_Function( int aSomeArg );

  */
}

$rect <20,60,220,100>
$output false
class DeviceClass : Templates::DeviceClass
{
  $rect <30,80,230,120>
  inherited method Done()
  {
    // The following section is intended to perform de-initialization-related operations
    // in the underlying device or middleware. Consequently, the section is taken in
    // account only when generating code (not during prototyping).
    $if !$prototyper
      var object thisObject = this;

      /*
         TO DO:

         The following native statement is intended to enclose code to communicate with
         your device API. The variable 'thisObject' contains a pointer to the actually
         de-initialized Application::DeviceClass object. Use the 'thisObject' pointer to
         e.g. de-register the object from the middleware if you have registered it
         beforehand.
         
      */

      native ( thisObject )
      {
        /*
           TO DO:

           Depending on your application case you call functions of the underlying
           middleware (or access the device directly) in order to perform the necessary
           de-initialization steps. For example, you invoke some 'C' function:

             YourDevice_DeInitialize();

           IMPORTANT:
           ----------

           The variable 'thisObject' represents the actually de-initialized instance of the
           Application::DeviceClass. If you have stored this object at the initialization
           time (in the 'Init' method) in some global C variable or registered it by the
           middleware, it is important to perform now the opposite operation. Set the
           global variable to NULL or de-register 'thisObject' object from the middleware.
           
        */
      }
    $endif
  }

  $rect <30,40,230,80>
  inherited method Init()
  {
    // The following section is intended to perform initialization-related operations
    // in the underlying device or middleware. Consequently, the section is taken in
    // account only when generating code (not during prototyping).
    $if !$prototyper
      var object thisObject = this;

      /*
         TO DO:

         The following native statement is intended to enclose code to communicate with
         your device API. The variable 'thisObject' contains a pointer to the actually
         initialized Application::DeviceClass object. Use the 'thisObject' pointer to
         e.g. register the object by the middleware as receiver of events, etc.
         
      */

      native ( thisObject )
      {
        /*
           TO DO:

           Depending on your application case you call functions of the underlying
           middleware (or access the device directly) in order to perform the necessary
           initialization steps. For example, you invoke some 'C' function:

             YourDevice_Initialize();

           The variable 'thisObject' represents the actually initialized instance of the
           Application::DeviceClass. You can store this variable e.g. in the middleware
           and use it whenever the middleware needs to notify the GUI application about
           some state alternation or events. In this manner, the middleware will be able
           to invoke methods of the interface device object.

           For example, you can store 'thisObject' in some global C variable:

             // Declaration of the global C variable
             XObject theDeviceObject;

             // Store the instance in the global variable
             theDeviceObject = thisObject;

           Later use the global variable e.g. to provide the GUI application with events:

             ApplicationDeviceClass__TriggerSomeEvent( theDeviceObject );

           IMPORTANT:
           ----------

           If you store 'thisObject' for later use, don't forget to implement the opposite
           operation in the method 'Done'. Concrete, 'Done' should set the global variable
           again to the value NULL.

        */
      }
    $endif
  }

  // Device classes are assembled from 'Commands', 'Properties' and 'System Events'. \
  // For this purpose use the following prepared templates from the Gallery folder \
  // 'Device':
  // 
  // Command - method to trigger actions in the underlying device or query data from \
  // the device.
  // 
  // Property - variable to represent or modify a setting or state value existing \
  // within the underlying device.
  // 
  // System Event - represents an event or notifications the underlying device may \
  // report.
  // 
  // For more details please visit: https://doc.embedded-wizard.de/device-class-and-device-driver
  note legend Note4
  {
    attr Bounds = <10,230,1100,400>;
  }

  // The method 'Init' is executed just in the moment when new instance of 'Application::DeviceClass' \
  // is created. It is suitable to:
  // - initialize the hardware represented by the interface.
  // - register the instance by the middleware to receive updates and events.
  // - open files, network connections or other system resources needed by the interface.
  // 
  // The method 'Done' is executed just in the moment when an instance of 'Application::DeviceClass' \
  // is disposed. It is suitable to:
  // - de-initialize the underlying hardware.
  // - de-register the instance from the underlying middleware.
  // - close files, network connections and other no longer needed system resources.
  // 
  // If your application case doesn't need the initialization or de-initialization, \
  // feel free to delete the methods 'Init' or/and 'Done'.
  note legend Note3
  {
    attr Bounds = <320,0,1100,220>;
  }

  // Constructor and Destructor
  note group Note1
  {
    attr Bounds = <10,0,250,140>;
  }

  $rect <1170,60,1370,100>
  method void LedSetMethod( arg string key, arg string setpoint, arg string dataType )
  {
    native{
      extern void LedSet(XString key, XString setpoint, XString dataType);
      LedSet(key, setpoint, dataType);
    }
  }

  // new created Methods for LED Controlls
  note group Note
  {
    attr Bounds = <1160,0,1710,400>;
  }

  $rect <1370,110,1570,150>
  object Core::SystemEvent UpdateSliderEvent;

  // This method is intended to be called by the device to notify the GUI application \
  // about a particular system event.
  $rect <1170,110,1370,150>
  $output true
  method void EWUpdateSlider( arg int32 newVal )
  {
       var Application::DeviceClass context = new Application::DeviceClass;

       context.brightnessValue = newVal; 

       UpdateSliderEvent.Trigger( context, false );

    /*
       HINT 1:

       When triggering the event you can pass an optional 'context' object.
       With it additional event specific data can be attached at the event
       and dispatched with it. All notified system event handler can thus
       evaluate this 'context' information.

       To do this, you will need to define a particular 'context' class
       suitable to store the event specific information. Then create an
       instance of the class, initialize it with all the specific context
       data and finally pass the instance in the first parameter of the
       Trigger() method:


       var YourUnit::ContextClass context = new YourUnit::ContextClass;

       context.SomeData1 = ...
       context.SomeData2 = ...

       SystemEvent.Trigger( context, false );


       You can add parameters to the method in order to simply receive
       values from the device.
    */

    /*
       HINT 2:

       When triggering a system event you can determine its priority. Per
       default system events are delivered strictly in the order in which
       they have been triggered. When you pass 'true' in the last parameter
       of Trigger() you can force the event to be dispatched early:

       SystemEvent.Trigger( null, true );
    */
  }

  // The object 'SystemEvent' represents an individual system event. When the system \
  // event is triggered all associated system event handler are notified automatically.
  // 
  // The method 'TriggerEvent' method is intended to be called by the device to notify \
  // the GUI application about the particular system event represented by the object \
  // 'SystemEvent'. This method exists for your convenience only and is optional. \
  // See inline documentation inside the method.
  note legend Note2
  {
    attr Bounds = <1190,410,1690,590>;
  }

  // The object 'SystemEventHandler' is a handler of a particular system event. When \
  // the system event is triggered, the handler calls the associated slot method \
  // 'onEvent' automatically. Within the 'onEvent' method you can react to the event. \
  // The method 'onEvent' exists for your convenience only. You can remove it and \
  // connect the system event handler with another slot method. See inline documentation \
  // inside the method.
  // 
  // Don't forget to connect the handler with the system event of interest. To do \
  // this set the property 'Event' of the handler to refer to the correct system \
  // event object.
  note legend Note5
  {
    attr Bounds = <1190,600,1690,820>;
  }

  $rect <1170,160,1370,200>
  property int32 brightnessValue;

  $rect <1170,200,1370,240>
  onset brightnessValue
  {
    // The value doesn't change - nothing to do.
    if ( pure brightnessValue == value )
      return;

    // Remember the property's new value.
    pure brightnessValue = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <1170,240,1370,280>
  onget brightnessValue
  {
    return pure brightnessValue;
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Done
  $member Init
  $member Note4
  $member Note3
  $member Note1
  $member Note
  $member LedSetMethod
  $member UpdateSliderEvent
  $member EWUpdateSlider
  $member Note2
  $member Note5
  $member brightnessValue
  $member OnSetbrightnessValue
  $member OnGetbrightnessValue
}

$rect <230,60,430,100>
autoobject Application::DeviceClass Device;

// The class 'Application::DeviceClass' implements the interface between the GUI \
// application and the device. Within the class you can react to system events sent \
// by the device, exchange data with the device or send commands to the device. You \
// are completely free in the design of this interface.
// 
// The object 'Device' represents the instance of the device interface. It exists \
// for your convenience. As an autoobject it is globally available for all GUI components \
// within your project.
// 
// The inline code member allows you to include external header files or add type \
// definitions needed by the implementation of 'Application::DeviceClass'.
// 
// More details inside the members.
// See also: https://doc.embedded-wizard.de/device-class-and-device-driver
note legend Note
{
  attr Bounds = <440,19,940,289>;
}
